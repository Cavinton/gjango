django-admin startproject config .

python3 manage.py makemigrations - создание миграции
python3 manage.py migrate - применение миграции

python3 manage.py runserver - запуск бэкэнда

python3 manage.py createsuperuser - создание админа(суперюзера)

-------------------------------------------------------------------

Model - класс, который характеризует структуру таблицы в бд, где аттрибутами будут поля таблицы(наследуется от класса 'django.db.models.Model')

Manager - класс, который предоставляет доступ через методы к 'ORM Django'(которая в свою очередь отправляет запросы в бд)

По умолчанию 'manager' добавляется в аттрибут 'objects' в модель 

'Поля'

CharField - для строковых значений(обязательно указывается 'max_length')

SlugField - для хранения slug(короткая метка для чего либо, содержащая только буквы, цифры, подчеркивания или дефисы. Они обычно импользуются в URL. Работает точно также ка CharField, но есть проверка на недопустымые символы)

TextField - для хранения текста 

DecimalField - для дробных чисел(обязательно принимает два обязательных аргумента 'max_digits'(кол-во цифр целой части),'decimal_places'(кол-во цифр после дробной части) )

IntegerField - для чисел

BoolField - для bool значений

DateField - для дат(питоновская версия datetime.date)(можно указать 'auto_now' - обновляется каждый раз как запись обновляется, 'auto_now_add' - задается только при создании обьекта)

TimeField - для хранения только времени(также можно использовать 'auto_now'/ 'auto_now_add')

DataTimeField - дата и время

DurationField - для хранения периода времени

EmailField - для почты(имеет встроенную проверку)

FileField - для загрузки файлов('upload_to' - для указания директории, где будут хранится файлы, в базе данных будет хранится лишь путь ло этих файлов)

ImageField - для загрузки фото(тоже самое что и FileField, но требует установки 'Pillow')

JsonField - для хранения строк в формате Json



Ограничения - параметры для полей

null - если null=True, то будет ставить в бд обьект 'null'  (по умолчанию стоит null=False)

blank - если True, будет ставить ''(пустая строка)

choices - позволяет ограничить возможные варианты записей, записей в этом поле. Нужно передать список с кортежами, где первый элемент то, что будет в бд, а второе то что будет отображаться

default = добавляет значения по умолчанию, если данные не переданы

editable - если стоит False, то запись нельзя поменять

primary key - если True, то это поле будет первичным ключем (идентификатором) в этой таблице (по дефолту django создает 'id')

unique - если True, то будет вызываться ошибка при попытке создать запись которая уже есть в таблице

validators - список для проверки поля



Cвязи
ForeignKey - связь один ко многим( обязательно указать 'модель' на которую будет ссылаться, 'on_delete', 'related_name')
ManyToMany - связь многие ко многим (обязательно указать 'модель' на которую будет ссылаться, 'on_delete', 'related_name')
OneToOne - связь один к одному(тоже самое что сверху)





on_delete
models.CASCADE - каскадное удаление (если удаляется главным обьект, то удалются все зависящие от него обьекты) Например блогер удалил аккаунт в инст, то и его публикации тоже удалятся

models.PROTECT - вызывает ошибку при попытке удаления главного обьекта

models.RESTRICT - в отличии от протект, удаление главного обьекта допускается, если он также ссылается на другой обьект который удаляется в той же операции, но через отношение CASCADE

models.SET_NULL - не удаляет зависящие обьекты, а ставит 'null'(только если null=True)

models.SET_DEFAULT -  ставит 'default' (только если был определен default)

models.DO_NOTHING - вообще ничего не делает, так что будет ошибка




'VIEWS'

view - это функция, которая принимает запрос, и возвращает ответ

В drf(django rest framwork) если мы пишем вьюшки на функциях, то нужно их декорировать 'api-view', в который мы передаем список с методами которые обрабатывает эта функция 

Если в url есть динамический элемент, то функция так же принимает вторым аргументом его(например id)

view должна возвращать Response или любой класс из django.http

APIView - класс, который позволяет вам на классах писать view
тот метод, который вы переопределите в классе, тот и будет обрабатывать ваша views(get, post, put, patch, delete)



'ViewSet'
Это класс, который позволяет обрабатывать сразу все запросы в одном класс(но этот класс нужно подключать в urls через router)

'viewset'
Включает в себя сразу все методы(create, retrieve, update, partial_update, destroy, list). Эти методы по желанию можно переопределить



'ModelViewSet'
Более удобная версия ViewSet
Достаточно переопределить такие аттрибуты 
 queryset - обьекты, которые будут использоваться
 serializer_class = сериализатор, который будет использоваться

Допольнительно можно переопределить 
 permission_class - список с permission_class
 filter_backend - список с классами для фильтрации

